{"version":3,"sources":["metadata/property.js"],"names":[],"mappings":";;;;;QAOgB;QA4BA;;AAlChB,IAAM,gBAAgB,QAAhB;;;;;;AAMC,SAAS,QAAT,OAAkC;MAAd,iBAAc;MAAR,iBAAQ;;;AAEvC,WAFuC;;AAIvC,SAAO,UAAU,MAAV,EAAkB,GAAlB,EAAuB,UAAvB,EAAoC;;AAEzC;;;AAFyC,QAKrC,aAAa,WAAW,MAAX,CAAmB,aAAnB,CAAb,CALqC;AAMzC,QAAI,CAAC,UAAD,EAAa;AACf,mBAAa,WAAW,MAAX,CAAmB,aAAnB,IAAqC,EAArC,CADE;KAAjB;;;AANyC,QAWnC,aAAa,QAAQ,WAAW,IAAX,CAXc;AAYzC,eAAY,WAAW,IAAX,CAAZ,GAAgC;AAC9B,YAAM,UAAN;AACA,YAAM,IAAN;KAFF,CAZyC;GAApC,CAJgC;CAAlC;;;;;AA4BA,SAAS,qBAAT,CAAgC,MAAhC,EAAyC;AAC9C,SAAO,OAAQ,aAAR,KAA2B,EAA3B,CADuC;CAAzC","file":"metadata/property.js","sourcesContent":["// some keys\nconst propertiesKey = Symbol();\n\n/**\n* Property decorator, adds metadata to the parent class\n* about this property\n*/\nexport function property({ name, type }) {\n\n  debugger;\n\n  return function( target, key, descriptor ) {\n\n    debugger;\n\n    // access the properties\n    let properties = descriptor.parent[ propertiesKey ];\n    if (!properties) {\n      properties = descriptor.parent[ propertiesKey ] = {};\n    }\n\n    // assign the property\n    const actualName = name || descriptor.name;\n    properties[ descriptor.name ] = {\n      name: actualName,\n      type: type\n    };\n\n  };\n\n}\n\n/**\n* Returns properties metadata for an object\n*/\nexport function getPropertiesMetadata( target ) {\n  return target[ propertiesKey ] || {};\n}\n"],"sourceRoot":"/source/"}