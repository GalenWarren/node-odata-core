{"version":3,"sources":["providers/memory/provider.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOa;;;;;;;AAKX,WALW,cAKX,OAAoC;QAAtB,qBAAsB;QAAd,6BAAc;;0BALzB,gBAKyB;;uEALzB,4BAKyB;;AAElC,UAAK,MAAL,GAAc,MAAd,CAFkC;AAGlC,UAAK,UAAL,GAAkB,UAAlB,CAHkC;;GAApC;;;;;;;eALW;;gCAcE,MAAO;AAClB,UAAM,MAAM,KAAK,UAAL,CAAiB,IAAjB,CAAN,CADY;AAElB,UAAI,CAAC,GAAD,EAAM;AACR,cAAM,IAAI,KAAJ,wBAA+B,mBAA/B,CAAN,CADQ;OAAV;AAGA,aAAO,iBAAE,KAAF,CAAQ,GAAR,CAAP,CALkB;;;;;;;;;2BAWZ,KAAK,WAAY;AACvB,aAAO,IAAI,MAAJ,CAAW,SAAX,CAAP,CADuB;;;;;;;;;wBAOpB,KAAK,OAAQ;AAChB,aAAO,IAAI,IAAJ,CAAS,KAAT,CAAP,CADgB;;;;SAhCP","file":"providers/memory/provider.js","sourcesContent":["import {inject} from \"aurelia-dependency-injection\";\nimport {Provider} from \"../provider\";\nimport _ from \"lodash\";\n\n/**\n* The default provider, that just operates on in-memory objects\n*/\nexport class MemoryProvider extends Provider {\n\n  /**\n  * The entities map is a map of entity names to arrays of objects\n  */\n  constructor({ schema, entitySets }) {\n    super();\n    this.schema = schema;\n    this.entitySets = entitySets;\n  }\n\n  /**\n  * Gets a set of entities\n  */\n  getEntities( name ) {\n    const set = this.entitySets[ name ];\n    if (!set) {\n      throw new Error(`Entity collection ${name} not found`);\n    }\n    return _.chain(set);\n  }\n\n  /**\n  * The filter implementation\n  */\n  filter( set, predicate ) {\n    return set.filter(predicate);\n  }\n\n  /**\n  * The top implementation\n  */\n  top( set, count ) {\n    return set.take(count);\n  }\n\n}\n"],"sourceRoot":"/source/"}