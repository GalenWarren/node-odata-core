{"version":3,"sources":["providers/provider.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAM,qBAAqB,8BAArB;;;;;;IAKO;;;;;;AAKX,WALW,QAKX,GAAkC;qEAAJ,kBAAI;;QAApB,+BAAoB;;0BALvB,UAKuB;;AAChC,SAAK,WAAL,GAAmB,eAAe,kBAAf,CADa;GAAlC;;;;;;;eALW;;;2EAYa,SAAS;YAGzB;;;;;;uBAAgB,qBAAQ,OAAR,CAAiB,KAAK,UAAL,CAAiB,OAAjB,CAAjB;;;AAAhB;;uBAGA,QAAS,OAAT,EAAkB,QAAlB;;;;;;;;;;;;;;;;;;;;;iCAOM,SAAU;;;AAGtB,cAAQ,SAAR,GAAoB,cAAI,KAAJ,CAAW,QAAQ,GAAR,CAA/B,CAHsB;;;;;;;;;;+BAWZ,SAAU;;;AAGpB,WAAK,YAAL,CAAmB,OAAnB;;;;;AAHoB;kCAQmB,KAAK,oBAAL,CAA2B,OAA3B,EARnB;;UAQZ,4CARY;UAQD;;;AARC;AAWpB,aAAO,UAAU,YAAV,EAAwB,QAAxB,EAAmC;;;;;yBAIT,UAAU,YAAV,EAJS;;YAIhC,2BAJgC;YAIxB,mCAJwB;;AAKxC,iBAAS,IAAT,GAAgB,gBAAiB,MAAjB,CAAhB,CALwC;AAMxC,iBAAS,UAAT,GAAsB,UAAtB,CANwC;OAAnC,CAXa;;;;;;;;;;yCA2BA,SAAU;AAC9B,aAAO,KAAK,WAAL,CAAiB,KAAjB,CAAuB,EAAE,KAAK,QAAQ,SAAR,EAA9B,CAAP,CAD8B;;;;;;;;;uCAOV;UAAR,kBAAQ;;AACpB,YAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CADoB;;;;;;;;;0CAOM;UAAX,wBAAW;;AAC1B,YAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN,CAD0B;;;;SA7EjB","file":"providers/provider.js","sourcesContent":["import _ from \"lodash\";\nimport Promise from \"any-promise\";\nimport URL from \"url\";\n\nimport {QueryParser} from \"./queryParser\";\n\n// the default query parser\nconst defaultQueryParser = new QueryParser();\n\n/**\n* The provider base class, all methods may return promises\n*/\nexport class Provider {\n\n  /**\n  * Construction\n  */\n  constructor({ queryParser } = {}) {\n    this.queryParser = queryParser || defaultQueryParser;\n  }\n\n  /**\n  * Populates a response given a request\n  */\n  async populateResponse( request, response ) {\n\n    // get the handler\n    const handler = await Promise.resolve( this.getHandler( request ));\n\n    // apply the handler to populate the response\n    await handler( request, response );\n\n  }\n\n  /**\n  * Parses an incoming request\n  */\n  parseRequest( request ) {\n\n    // parse the url\n    request.parsedUrl = URL.parse( request.url );\n\n  }\n\n  /**\n  * Gets a handler for a request, which is an action applied\n  * to the request state and response (to populate the response)\n  */\n  getHandler( request ) {\n\n    // first, parse the request\n    this.parseRequest( request );\n\n    // normalize and check the cache?\n\n    // now, get the components of the handler\n    const { getResult, transformResult } = this.createHandlerMethods( request );\n\n    // return the handler function\n    return function( requestState, response ) {\n\n      // call to get the result based on the request state, store\n      // results in response\n      const { result, statusCode } = getResult(requestState);\n      response.body = transformResult( result );\n      response.statusCode = statusCode;\n\n    };\n\n  }\n\n  /**\n  * Get the handler components, to get the result and status contextIdentifier\n  * and then further transform the results\n  */\n  createHandlerMethods( request ) {\n    return this.queryParser.parse({ url: request.parsedUrl })\n  }\n\n  /**\n  * Returns a set of entities by name\n  */\n  getEntities({ name }) {\n    throw new Error(\"Not implemented\");\n  }\n\n  /**\n  * Evaluates the context to get a result\n  */\n  populateResult({ context }) {\n    throw new Error(\"Not implemented\");\n  }\n\n}\n"],"sourceRoot":"/source/"}