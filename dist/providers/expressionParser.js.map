{"version":3,"sources":["providers/expressionParser.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;IAKa;;;;;;;;;;;;gCAKW;UAAd,6BAAc;;;;AAGpB,UAAM,MAAM,KAAK,KAAL,CAAW,EAAE,MAAM,UAAN,EAAb,CAAN,CAHc;AAIpB,cAAQ,GAAR,CAAa,GAAb,EAJoB;;;;;;;;;iCAUN;UAAR,kBAAQ;;;;AAGd,UAAM,SAAS,gBAAc,KAAK,IAAL,CAAvB,CAHQ;AAId,UAAI,CAAC,MAAD,EAAS;AACX,cAAM,IAAI,KAAJ,yCAAiD,KAAK,IAAL,CAAvD,CADW;OAAb;;;AAJc,aASP,OAAO,IAAP,CAAa,IAAb,EAAmB,EAAE,UAAF,EAAnB,CAAP,CATc;;;;;;;;;oCAeG;UAAR,kBAAQ;;AACjB,aAAO;AACL,cAAM,qBAAN;AACA,oBAAY;AACV,gBAAM,kBAAN;AACA,oBAAU,KAAV;AACA,gBAAM,KAAK,KAAL,CAAW,EAAE,MAAM,KAAK,IAAL,EAAnB,CAAN;AACA,iBAAO,KAAK,KAAL,CAAW,EAAE,MAAM,KAAK,KAAL,EAAnB,CAAP;SAJF;OAFF,CADiB;;;;;;;;;0CAeI;UAAP,kBAAO;;AACrB,aAAO,SAAI,UAAJ,CAAe,EAAE,MAAM,KAAK,IAAL,EAAvB,CAAP,CADqB;;;;;;;;yCAMD;UAAP,kBAAO;;AACpB,aAAO,SAAI,OAAJ,CAAY,EAAE,OAAO,KAAK,KAAL,EAArB,CAAP,CADoB;;;;SAnDX","file":"providers/expressionParser.js","sourcesContent":["import {Ast} from \"../util/ast\";\n\n/**\n* The expression parser\n*/\nexport class ExpressionParser {\n\n  /**\n  * Parse the expression to return a function\n  */\n  parse({ expression }) {\n\n    // construct the ast\n    const ast = this.visit({ node: expression });\n    console.log( ast );\n  }\n\n  /**\n  * Root visit method\n  */\n  visit({ node }) {\n\n    // look for the method\n    const method = this[`visit_${node.type}`];\n    if (!method) {\n      throw new Error( `Encountered unrecognized node type ${node.type}`);\n    }\n\n    // call it\n    return method.call( this, { node });\n  }\n\n  /**\n  * Equality node, translate to ast\n  */\n  visit_eq({ node }) {\n    return {\n      type: \"ExpressionStatement\",\n      expression: {\n        type: \"BinaryExpression\",\n        operator: \"===\",\n        left: this.visit({ node: node.left }),\n        right: this.visit({ node: node.right })\n      }\n    };\n  }\n\n  /**\n  * Property node\n  */\n  visit_property({node}) {\n    return Ast.identifier({ name: node.name });\n  }\n  /**\n  * Literal node\n  */\n  visit_literal({node}) {\n    return Ast.literal({ value: node.value });\n  }\n\n}\n"],"sourceRoot":"/source/"}