{"version":3,"sources":["pipeline/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAM,WAAW,kBAAQ,OAAR,EAAX;;;;;IAMO,sCADZ,wCAAO,UAAP;;;;;;AAMC,WALW,QAKX,CAAa,QAAb,EAAuC;0BAL5B,UAK4B;;;AAGrC,SAAK,QAAL,GAAgB,QAAhB;;;;;;AAHqC;sCAAb;;KAAa;;AASrC,SAAK,OAAL,GAAe,sBAAE,UAAF,EAAc,OAAd,GAAwB,MAAxB,CAAgC,UAAC,IAAD,EAAO,SAAP,EAAqB;;AAElE,aAAO,UAAE,OAAF;eAAe,UAAU,OAAV,CAAmB,OAAnB,EAA4B;iBAAM,KAAM,OAAN;SAAN;OAA3C,CAF2D;KAArB,EAI5C;aAAM;KAAN,CAJY,CAIK,KAJL,CATsB;GAAvC;;;;;;;eALW;;iCAyB+B;UAA1B,yBAA0B;+BAAhB,SAAgB;UAAhB,yCAAW,mBAAK;;;AAExC,UAAM,YAAY,2CAAZ,CAFkC;AAGxC,gBAAU,gBAAV,kBAAsC,QAAtC,EAHwC;AAIxC,gBAAU,gBAAV,CAA4B,UAA5B,EAAwC,QAAxC,EAJwC;AAKxC,aAAO,UAAU,GAAV,CAAc,QAAd,CAAP,CALwC;;;;SAzB/B","file":"pipeline/index.js","sourcesContent":["import {inject,Container} from \"aurelia-dependency-injection\";\nimport {Promise} from \"bluebird\";\nimport _ from \"lodash\";\n\nimport {Provider} from \"../providers/index\";\nimport {ParseComponent} from \"./parse\";\n\n// a resolved promise used to end the pipeline\nconst resolved = Promise.resolve();\n\n/**\n* The processing pipeline\n*/\n@inject(\"settings\",ParseComponent)\nexport class Pipeline {\n\n  /**\n  * Constructor\n  */\n  constructor( settings, ...components ) {\n\n    // store the settings\n    this.settings = settings;\n\n    /**\n    * The process function\n    * @param {context}\n    */\n    this.process = _(components).reverse().reduce( (func, component) => {\n\n      return ( context ) => component.process( context, () => func( context ));\n\n    }, () => resolved ).value\n\n  }\n\n  /**\n  * Creates a pipeline against the given provider with the provided settings\n  */\n  static create({ provider, settings = {}}) {\n\n    const container = new Container();\n    container.registerInstance( Provider, provider );\n    container.registerInstance( \"settings\", settings );\n    return container.get(Pipeline);\n\n  }\n\n}\n"],"sourceRoot":"/source/"}