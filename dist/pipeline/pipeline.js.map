{"version":3,"sources":["pipeline/pipeline.js"],"names":[],"mappings":";;;;;;;;;;;;;;sDASA,iBAAmC,OAAnC;;;;;;;;;;;;kBAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKf,SAAS,eAAT,CAA0B,aAA1B,EAA0C;;AAExC,SAAO,EAAP,CAFwC;CAA1C;;;;;;IASa;;;;;;AAKX,WALW,QAKX,OAA4B;QAAd,6BAAc;;0BALjB,UAKiB;;;AAG1B,SAAK,MAAL,GAAc,sBAAE,UAAF,EAAc,OAAd,GAAwB,MAAxB,CAAgC,UAAE,YAAF,EAAgB,SAAhB,EAAgC;;AAE5E,aAAO;eAAW,UAAU,MAAV,CAAkB,OAAlB,EAA2B;iBAAM,aAAc,OAAd;SAAN;OAAtC,CAFqE;KAAhC,EAI3C,kBAJW,CAAd,CAH0B;GAA5B;;;;;;;eALW;;4CAmBqD;UAAtC,sCAAsC;UAAtB,wBAAsB;UAAb,4BAAa;;;;AAG9D,UAAM,mBAAmB,WAAa;eAAiB,UAAU,GAAV,CAAc,aAAd;OAAjB;;;AAHwB,UAMxD,eAAe,iBAAE,OAAF,CAAU,cAAV,EAA0B,eAA1B,CAAf;;;AANwD,UASxD,uBAAuB,mBAAS,KAAT,CAAgB,cAAhB,EAAgC,YAAhC,EAA+C,OAA/C,EAAvB;;;AATwD,aAYvD,iBAAE,GAAF,CAAO,oBAAP,EAA6B,gBAA7B,CAAP,CAZ8D;;;;SAnBrD","file":"pipeline/pipeline.js","sourcesContent":["import _ from \"lodash\";\nimport toposort from \"toposort\";\nimport Promise from \"any-promise\";\n\nimport {precedesTypes,followsTypes} from \"./decorators\";\n\n/**\n* The default execute function, does nothing\n*/\nasync function pipelineTerminator( context ) {}\n\n/**\n* Returns the dependencies for this component, from metadata\n*/\nfunction getDependencies( componentType ) {\n\n  return [];\n\n}\n\n/**\n* A processing pipeline\n*/\nexport class Pipeline {\n\n  /**\n  * Construction, takes a set of components and assembles the pipeline\n  */\n  constructor({ components }) {\n\n    // build the handle function by combining together all the components\n    this.handle = _(components).reverse().reduce( ( innerExecute, component  ) => {\n\n      return context => component.handle( context, () => innerExecute( context ));\n\n    }, pipelineTerminator );\n\n  }\n\n  /**\n  * Creates a pipeline from a set of component types using the provided container\n  */\n  static createComponents({ componentTypes, factory, container }) {\n\n    // get the factory function\n    const componentFactory = factory || ( componentType => container.get(componentType) );\n\n    // get all dependencies (edge nodes)\n    const dependencies = _.flatMap(componentTypes, getDependencies );\n\n    // get the components in sorted order\n    const sortedComponentTypes = toposort.array( componentTypes, dependencies ).reverse();\n\n    // create all the component objects\n    return _.map( sortedComponentTypes, componentFactory );\n\n  }\n\n}\n"],"sourceRoot":"/source/"}